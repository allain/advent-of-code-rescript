// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

var numbers = Belt_Array.map(Belt_Array.map(Fs.readFileSync("input.txt", "utf-8").split("\n"), Belt_Float.fromString), Belt_Option.getExn);

var queue = Belt_Array.slice(numbers, 0, 25);

var numbers$1 = Belt_Array.sliceToEnd(numbers, 25);

function pushValid(queue, n) {
  if (Belt_Array.some(queue, (function (a) {
            return Belt_Array.some(queue, (function (b) {
                          return a !== b ? a + b === n : false;
                        }));
          }))) {
    return Belt_Array.sliceToEnd(queue, 1).concat([n]);
  }
  
}

Belt_Array.reduce(numbers$1, queue, (function (queue, n) {
        if (queue === undefined) {
          return ;
        }
        var newQueue = pushValid(queue, n);
        if (newQueue !== undefined) {
          return newQueue;
        } else {
          console.log(n);
          return ;
        }
      }));

function sumOf(ns) {
  return Belt_Array.reduce(ns, 0.0, (function (sum, n) {
                return sum + n;
              }));
}

function addOffset(arr1, arr2, offset) {
  return Belt_Array.mapWithIndex(arr1, (function (i, n) {
                return n + Belt_Option.getWithDefault(Belt_Array.get(arr2, i + offset | 0), 0.0);
              }));
}

var foundIndex = {
  contents: -1
};

var foundLength = {
  contents: -1
};

var result = Belt_Array.reduce(Belt_Array.makeBy(numbers$1.length, (function (i) {
            return i + 1 | 0;
          })), numbers$1, (function (summed, offset) {
        var summed$1 = addOffset(summed, numbers$1, offset);
        var indexOfSum = Belt_Array.getIndexBy(summed$1, (function (n) {
                return n === 85848519.0;
              }));
        if (indexOfSum !== undefined) {
          foundIndex.contents = indexOfSum;
          foundLength.contents = offset;
          return [];
        } else {
          return summed$1;
        }
      }));

var sequence = Belt_Array.slice(numbers$1, foundIndex.contents, foundLength.contents + 1 | 0);

var smallest = Belt_Array.reduce(sequence, Belt_Option.getExn(Belt_Array.get(sequence, 0)), (function (min, n) {
        return Math.min(min, n);
      }));

var biggest = Belt_Array.reduce(sequence, Belt_Option.getExn(Belt_Array.get(sequence, 0)), (function (min, n) {
        return Math.max(min, n);
      }));

console.log(smallest + biggest);

console.log({
      smallest: smallest,
      biggest: biggest
    });

console.log(sumOf(sequence));

console.log(foundIndex.contents);

console.log(foundLength.contents);

var queueLength = 25;

export {
  queueLength ,
  queue ,
  numbers$1 as numbers,
  pushValid ,
  sumOf ,
  addOffset ,
  foundIndex ,
  foundLength ,
  result ,
  sequence ,
  smallest ,
  biggest ,
  
}
/* numbers Not a pure module */
