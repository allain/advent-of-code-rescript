// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var rawPassports = Fs.readFileSync("input.txt", "utf-8").split("\n\n");

var InvalidProp = /* @__PURE__ */Caml_exceptions.create("Run.InvalidProp");

var EmptyProp = /* @__PURE__ */Caml_exceptions.create("Run.EmptyProp");

var InvalidHeight = /* @__PURE__ */Caml_exceptions.create("Run.InvalidHeight");

function parsePassport(raw) {
  return Belt_Array.map(raw.split(/[\n ]+/), (function (prop) {
                if (prop !== undefined) {
                  var parts = prop.split(":");
                  return [
                          Belt_Option.getExn(Belt_Array.get(parts, 0)),
                          Belt_Option.getExn(Belt_Array.get(parts, 1))
                        ];
                }
                throw {
                      RE_EXN_ID: EmptyProp,
                      Error: new Error()
                    };
              }));
}

function between(year, min, max) {
  if (Caml_obj.caml_greaterequal(year, min)) {
    return Caml_obj.caml_lessequal(year, max);
  } else {
    return false;
  }
}

function isColor(str) {
  return /^#[0-9a-f]{6}$/.test(str);
}

function isPasspordId(str) {
  return /^[0-9]{9}$/.test(str);
}

function hasAllRequired(passport) {
  var requiredFields = [
    "byr",
    "iyr",
    "eyr",
    "hgt",
    "hcl",
    "ecl",
    "pid"
  ];
  var unknownFields = Belt_Array.keep(passport, (function (param) {
          return !requiredFields.includes(param[0]);
        }));
  var givenRequiredFieldCount = passport.length - unknownFields.length | 0;
  return givenRequiredFieldCount === requiredFields.length;
}

function fieldsValid(passport) {
  return Belt_Array.every(passport, (function (pair) {
                switch (pair[0]) {
                  case "byr" :
                      return between(Caml_format.caml_int_of_string(pair[1]), 1920, 2002);
                  case "ecl" :
                      var value = pair[1];
                      return Belt_Array.some([
                                  "amb",
                                  "blu",
                                  "brn",
                                  "gry",
                                  "grn",
                                  "hzl",
                                  "oth"
                                ], (function (clr) {
                                    return clr === value;
                                  }));
                  case "eyr" :
                      return between(Caml_format.caml_int_of_string(pair[1]), 2020, 2030);
                  case "hcl" :
                      return isColor(pair[1]);
                  case "hgt" :
                      var value$1 = pair[1];
                      var result = /(\d+)(cm|in)$/.exec(value$1);
                      if (result === null) {
                        return false;
                      }
                      var captures = Belt_Array.map(Belt_Array.map(result, (function (prim) {
                                  if (prim == null) {
                                    return ;
                                  } else {
                                    return Caml_option.some(prim);
                                  }
                                })), Belt_Option.getExn);
                      var match = Belt_Array.get(captures, 2);
                      if (match !== undefined) {
                        switch (match) {
                          case "cm" :
                              var cmHeight = Belt_Array.get(captures, 1);
                              if (cmHeight !== undefined) {
                                return between(Caml_format.caml_int_of_string(cmHeight), 150, 193);
                              }
                              throw {
                                    RE_EXN_ID: InvalidHeight,
                                    _1: value$1,
                                    Error: new Error()
                                  };
                          case "in" :
                              var inHeight = Belt_Array.get(captures, 1);
                              if (inHeight !== undefined) {
                                return between(Caml_format.caml_int_of_string(inHeight), 59, 76);
                              }
                              throw {
                                    RE_EXN_ID: InvalidHeight,
                                    _1: value$1,
                                    Error: new Error()
                                  };
                          default:
                            throw {
                                  RE_EXN_ID: InvalidHeight,
                                  _1: value$1,
                                  Error: new Error()
                                };
                        }
                      } else {
                        throw {
                              RE_EXN_ID: InvalidHeight,
                              _1: value$1,
                              Error: new Error()
                            };
                      }
                  case "iyr" :
                      return between(Caml_format.caml_int_of_string(pair[1]), 2010, 2020);
                  case "pid" :
                      return isPasspordId(pair[1]);
                  default:
                    return true;
                }
              }));
}

function isPassportValid(passport) {
  if (hasAllRequired(passport)) {
    return fieldsValid(passport);
  } else {
    return false;
  }
}

var validPassports = Belt_Array.keep(Belt_Array.map(rawPassports, parsePassport), isPassportValid);

console.log(validPassports.length);

export {
  rawPassports ,
  InvalidProp ,
  EmptyProp ,
  InvalidHeight ,
  parsePassport ,
  between ,
  isColor ,
  isPasspordId ,
  hasAllRequired ,
  fieldsValid ,
  isPassportValid ,
  validPassports ,
  
}
/* rawPassports Not a pure module */
