// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Caml_string from "rescript/lib/es6/caml_string.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var lines = Fs.readFileSync("input.txt", "utf-8").split("\n");

var parseRegex = /^(\d+)-(\d+) ([a-z]): ([a-z]+)/;

var InvalidLine = /* @__PURE__ */Caml_exceptions.create("Run.InvalidLine");

function parseLine(line) {
  var result = parseRegex.exec(line);
  var captures;
  if (result !== null) {
    captures = Belt_Array.map(result, (function (v) {
            if (v == null) {
              return "";
            } else {
              return v;
            }
          }));
  } else {
    throw {
          RE_EXN_ID: InvalidLine,
          _1: line,
          Error: new Error()
        };
  }
  return [
          Caml_format.caml_int_of_string(Belt_Array.getExn(captures, 1)),
          Caml_format.caml_int_of_string(Belt_Array.getExn(captures, 2)),
          Caml_string.get(Belt_Array.getExn(captures, 3), 0),
          Belt_Array.getExn(captures, 4)
        ];
}

function countValid(lines, policy) {
  return lines.reduce((function (count, line) {
                if (Curry._1(policy, parseLine(line))) {
                  return count + 1 | 0;
                } else {
                  return count;
                }
              }), 0);
}

console.log("Part A");

var validCount = countValid(lines, (function (param) {
        var letter = param[2];
        var count = param[3].split("").filter(function (c) {
              return Caml_string.get(c, 0) === letter;
            }).length;
        if (count >= param[0]) {
          return count <= param[1];
        } else {
          return false;
        }
      }));

console.log(validCount);

console.log("Part B");

var validCount$1 = countValid(lines, (function (param) {
        var password = param[3];
        var letter = param[2];
        var letter1 = Caml_string.get(password, param[0] - 1 | 0);
        var letter2 = Caml_string.get(password, param[1] - 1 | 0);
        if (letter2 !== letter1) {
          if (letter1 === letter) {
            return true;
          } else {
            return letter2 === letter;
          }
        } else {
          return false;
        }
      }));

console.log(validCount$1);

export {
  lines ,
  parseRegex ,
  InvalidLine ,
  parseLine ,
  countValid ,
  validCount$1 as validCount,
  
}
/* lines Not a pure module */
