// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var lines = Fs.readFileSync("input.txt", "utf-8").split("\n");

var parseRegex = /^(\d+)-(\d+) ([a-z]): ([a-z]+)/;

var InvalidLine = /* @__PURE__ */Caml_exceptions.create("Run.InvalidLine");

var invalids = lines.reduce((function (count, line) {
        var result = parseRegex.exec(line);
        var invalid;
        if (result !== null) {
          var captures = Belt_Array.map(result, (function (v) {
                  if (v == null) {
                    return "";
                  } else {
                    return v;
                  }
                }));
          var min = Caml_format.caml_int_of_string(Belt_Array.getExn(captures, 1));
          var max = Caml_format.caml_int_of_string(Belt_Array.getExn(captures, 2));
          var letter = Belt_Array.getExn(captures, 3);
          var password = Belt_Array.getExn(captures, 4);
          var count$1 = password.split("").filter(function (c) {
                return c === letter;
              }).length;
          invalid = count$1 < min || count$1 > max;
        } else {
          throw {
                RE_EXN_ID: InvalidLine,
                _1: line,
                Error: new Error()
              };
        }
        if (invalid) {
          return count;
        } else {
          return count + 1 | 0;
        }
      }), 0);

console.log(invalids);

export {
  lines ,
  parseRegex ,
  InvalidLine ,
  invalids ,
  
}
/* lines Not a pure module */
